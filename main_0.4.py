import telebot
from telebot import types
import csv
import datetime
import time
import schedule
import logging
from requests.exceptions import RequestException

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot("6290776101:AAEsU7xSYtxu2zWeGqjfh3wJ06tr9RPaiYA")


class UserDataManager:
    def __init__(self):
        self.users_data = {}

    def save_to_csv(self, user_id, username, decision):
        with open('data.csv', mode='a', newline='', encoding='utf-8') as data_file:
            data_writer = csv.writer(data_file)
            data_writer.writerow([user_id, username, decision])

    def update_user_data(self, user_id, stage, time):
        if user_id not in self.users_data:
            self.users_data[user_id] = {'stage': stage, 'time': time}
        else:
            self.users_data[user_id]['stage'] = stage
            self.users_data[user_id]['time'] = time

    def check_and_send_reminders(self, bot):
        now = datetime.datetime.now()
        for user_id, data in self.users_data.items():
            elapsed_time = now - data['time']
            if elapsed_time > datetime.timedelta(days=1) and data['stage'] != '—Ä–µ—à–µ–Ω–∏–µ 3':
                bot.send_message(user_id, text='–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')


@bot.message_handler(commands=['start'])
def start(message):
    button_1 = types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫', callback_data='—Ä–µ—à–µ–Ω–∏–µ 1')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(button_1)

    data_manager.update_user_data(message.chat.id, 'start', datetime.datetime.now())

    bot.send_message(message.chat.id, text=f"""<b>üìà–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏–Ω–≤–µ—Å—Ç–æ—Ä!</b>

–°–µ–≥–æ–¥–Ω—è –¥–ª—è –í–∞—Å –æ—Ç–∫—Ä–æ—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç <b>–ø—Ä–∏—É–º–Ω–æ–∂–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ªüí∏</b>

–ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —É—Ä–æ–∫–æ–≤:

1Ô∏è‚É£ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏. –ö—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? 

2Ô∏è‚É£–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ 20%+ –≥–æ–¥–æ–≤—ã—Ö 

3Ô∏è‚É£–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ö–∞–∫ –Ω–µ –ø—Ä–æ–≥–æ—Ä–µ—Ç—å? 

<b>–°–∫–æ—Ä–µ–µ –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–±–æ–¥—Éüëá</b>""",
                     reply_markup=keyboard, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    username = call.from_user.username
    now = datetime.datetime.now()

    if call.data == '—Ä–µ—à–µ–Ω–∏–µ 1':
        data_manager.save_to_csv(user_id, username, '—Ä–µ—à–µ–Ω–∏–µ 1')
        data_manager.update_user_data(user_id, '—Ä–µ—à–µ–Ω–∏–µ 1', now)

        button_2 = types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –≤—Ç–æ—Ä–æ–π —É—Ä–æ–∫', callback_data='—Ä–µ—à–µ–Ω–∏–µ 2')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(button_2)

        bot.send_message(call.message.chat.id, text=f"""<b>üí∞–£—Ä–æ–∫ 1. –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ –±—É–¥—É—â–µ–≥–æ –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞. –ö—É–¥–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?</b>

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ:

üìå–ó–∞—á–µ–º –Ω—É–∂–Ω—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?
üìå–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –ø–µ—Ä–≤–æ–π –∞–∫—Ü–∏–∏?
üìå–ì–¥–µ –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ç–∏–≤—ã?
üìå–ö—É–¥–∞ –º–æ–∂–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? 

<b>–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫üëá</b>

‚ñ∂Ô∏è<a href="{"https://youtu.be/SGh4PRXYpY4"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è
‚ñ∂Ô∏è<a href="{"https://youtu.be/SGh4PRXYpY4"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è
‚ñ∂Ô∏è<a href="{"https://youtu.be/SGh4PRXYpY4"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è



–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫–æ <b>–≤—Ç–æ—Ä–æ–º—É —É—Ä–æ–∫—É</b>, –≥–¥–µ –±—É–¥—É—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ <b>—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b> –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–πüëá""", reply_markup=keyboard, parse_mode="HTML")

    elif call.data == '—Ä–µ—à–µ–Ω–∏–µ 2':
        data_manager.save_to_csv(user_id, username, '—Ä–µ—à–µ–Ω–∏–µ 2')
        data_manager.update_user_data(user_id, '—Ä–µ—à–µ–Ω–∏–µ 2', now)

        button_3 = types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–∫', callback_data='—Ä–µ—à–µ–Ω–∏–µ 3')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(button_3)

        bot.send_message(call.message.chat.id, text=f"""<b>üíµ–£—Ä–æ–∫ 2. –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ 20%+ –≥–æ–¥–æ–≤—ã—Ö</b>

–í —ç—Ç–æ–º —É—Ä–æ–∫–µ <b>—Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π</b>, –∫–∞–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–∞–º–∏ –ø–æ–ª—É—á–∞—Ç—å –≤ <b>3-4 —Ä–∞–∑–∞</b> –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ.

<b>–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫üëá</b>

‚ñ∂Ô∏è<a href="{"https://youtu.be/gWiTiYYk_NY"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è
‚ñ∂Ô∏è<a href="{"https://youtu.be/gWiTiYYk_NY"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è
‚ñ∂Ô∏è<a href="{"https://youtu.be/gWiTiYYk_NY"}">{"–£–†–û–ö –¢–£–¢"}</a>‚óÄÔ∏è

–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ —Ç–æ–º, –∫–∞–∫ <b>—Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å</b>, –∫–∞–∫ <b>–ù–ï –ø—Ä–æ–≥–æ—Ä–µ—Ç—å</b> –∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.</b> 

<b>–°–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µüëá</b>""", reply_markup=keyboard, parse_mode="HTML")

    elif call.data == '—Ä–µ—à–µ–Ω–∏–µ 3':
        data_manager.save_to_csv(user_id, username, '—Ä–µ—à–µ–Ω–∏–µ 3')
        data_manager.update_user_data(user_id, '—Ä–µ—à–µ–Ω–∏–µ 3', now)

        button_4 = types.InlineKeyboardButton('–Ø –ø—Ä–æ—à–µ–ª –∫—É—Ä—Å –∏ –Ω–∞—á–∏–Ω–∞—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='—Ä–µ—à–µ–Ω–∏–µ 4')
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(button_4)

        bot.send_message(call.message.chat.id, text=f"""<b>üí≤–£—Ä–æ–∫ 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.</b>

<b>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ:</b>

‚ùì–ö–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º?
‚ùì–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–µ–Ω—å–≥–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?
‚ùì–ö–∞–∫ –Ω–∞—É—á–∏—Ç—å—Å—è —Ç—Ä–µ–π–¥–∏–Ω–≥—É –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂–µ?
‚ùì–ö–∞–∫ –Ω–µ –ø—Ä–æ–≥–æ—Ä–µ—Ç—å?
‚ùì–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–≥–∞—à–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã?
‚ùì–ö–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã?

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ü•≥""",
                         reply_markup=keyboard, parse_mode="HTML")

    elif call.data == '—Ä–µ—à–µ–Ω–∏–µ 4':
        data_manager.save_to_csv(user_id, username, '—Ä–µ—à–µ–Ω–∏–µ 4')
        data_manager.update_user_data(user_id, '—Ä–µ—à–µ–Ω–∏–µ 4', now)



        bot.send_message(call.message.chat.id, text=f"""<b>–£—Ä–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ!</b>

üì≤–û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–≤—è–∑–∏:

<a href="{"https://t.me/alenakladko"}">{"–¢–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"}</a>

<a href="{"https://instagram.com/alena.kladko?igshid=NTc4MTIwNjQ2YQ=="}">{"–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –≤–∏–¥–µ–æ"}</a>

–û—Ç–∑—ã–≤—ã, –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç—É—Ç üëâ @alena_kladko

–° —Ä–∞–¥–æ—Å—Ç—å—é –≤—Å–µ –ø–æ—Å–º–æ—Ç—Ä—é‚ù§Ô∏è""",
                         reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")


def polling_with_reminders(data_manager_instance):
    schedule.every(1).hours.do(data_manager_instance.check_and_send_reminders, bot=bot)

    backoff = 1

    while True:
        try:
            bot.infinity_polling(timeout=20)
            backoff = 1
        except RequestException as e:
            logger.error(f'RequestException: {e}')
            time.sleep(backoff)
            backoff = min(backoff * 2, 300)
        except Exception as e:
            logger.error(f'Unexpected exception: {e}')
            time.sleep(10)

        schedule.run_pending()
        time.sleep(1)


def main():
    global data_manager
    data_manager = UserDataManager()
    polling_with_reminders(data_manager)


if __name__ == '__main__':
    main()
